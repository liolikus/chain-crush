---
alwaysApply: true
---
Always follow /home/liolik/p/chain-crush/.cursor/rules/00-main-rule.mdc rule!


# Development Agent Workflow - Cursor Template

## Primary Directive
You are a development agent implementing a project. Follow established documentation and maintain consistency.

## Core Workflow Process

### Before Starting Any Task
- Consult `/Docs/Implementation.md` for current stage and available tasks
- Check task dependencies and prerequisites
- Verify scope understanding

### Task Execution Protocol

#### 1. Task Assessment
- Read subtask from `/Docs/Implementation.md`
- Assess subtask complexity:
  - **Simple subtask:** Implement directly
  - **Complex subtask:** Create a todo list

#### 2. Documentation Research
- Check `/Docs/Implementation.md` for relevant documentation links in the subtask
- Read and understand documentation before implementing

#### 3. UI/UX Implementation
- Consult `/Docs/UI_UX_doc.md` before implementing any UI/UX elements
- Follow design system specifications and responsive requirements

#### 4. Project Structure Compliance
- Check `/Docs/project_structure.md` before:
  - Running commands
  - Creating files/folders
  - Making structural changes
  - Adding dependencies

#### 5. Error Handling
- Check `/Docs/Bug_tracking.md` for similar issues before fixing
- Document all errors and solutions in Bug_tracking.md
- Include error details, root cause, and resolution steps

#### 6. Task Completion
Mark tasks complete only when:
- All functionality implemented correctly
- Code follows project structure guidelines
- UI/UX matches specifications (if applicable)
- No errors or warnings remain
- All task list items completed (if applicable)

### File Reference Priority
1. `/Docs/Bug_tracking.md` - Check for known issues first
2. `/Docs/Implementation.md` - Main task reference
3. `/Docs/project_structure.md` - Structure guidance
4. `/Docs/UI_UX_doc.md` - Design requirements

## Critical Rules
- **NEVER** skip documentation consultation
- **NEVER** mark tasks complete without proper testing
- **NEVER** ignore project structure guidelines
- **NEVER** implement UI without checking UI_UX_doc.md
- **NEVER** fix errors without checking Bug_tracking.md first
- **ALWAYS** document errors and solutions
- **ALWAYS** follow the established workflow process

## Web3-Specific Guidelines

### Smart Contract Development
- Always include security best practices
- Implement proper error handling
- Add comprehensive testing
- Follow OpenZeppelin patterns
- Include gas optimization considerations

### Frontend Web3 Integration
- Implement proper wallet connection handling
- Add loading states for blockchain operations
- Handle transaction confirmation flows
- Provide clear error messages for users
- Follow responsive design principles

### Backend Web3 Services
- Implement proper Web3 provider management
- Add event listening and processing
- Handle blockchain network changes
- Implement proper caching strategies
- Add comprehensive logging

## Code Quality Standards

### General Requirements
- Use TypeScript for better type safety
- Implement proper error handling
- Add comprehensive testing
- Follow consistent naming conventions
- Include proper documentation

### Performance Considerations
- Optimize for gas usage in smart contracts
- Implement proper caching strategies
- Use lazy loading where appropriate
- Optimize bundle sizes
- Monitor and optimize performance

### Security Best Practices
- Validate all inputs
- Implement proper access controls
- Use secure random number generation
- Follow the principle of least privilege
- Regular security audits

## Response Style Guidelines

### For Development Responses
- Follow established patterns
- Maintain consistency with existing code
- Provide clear explanations
- Include error handling
- Suggest improvements when appropriate

### For Documentation
- Ensure consistency across all files
- Create logical connections between documents
- Maintain alignment between implementation and design
- Update documentation as project evolves
- Cross-reference between documents

Remember: Build a cohesive, well-documented, and maintainable project. Every decision should support overall project goals and maintain consistency with established patterns. # Development Agent Workflow - Cursor Template

## Primary Directive
You are a development agent implementing a project. Follow established documentation and maintain consistency.

## Core Workflow Process

### Before Starting Any Task
- Consult `/Docs/Implementation.md` for current stage and available tasks
- Check task dependencies and prerequisites
- Verify scope understanding

### Task Execution Protocol

#### 1. Task Assessment
- Read subtask from `/Docs/Implementation.md`
- Assess subtask complexity:
  - **Simple subtask:** Implement directly
  - **Complex subtask:** Create a todo list

#### 2. Documentation Research
- Check `/Docs/Implementation.md` for relevant documentation links in the subtask
- Read and understand documentation before implementing

#### 3. UI/UX Implementation
- Consult `/Docs/UI_UX_doc.md` before implementing any UI/UX elements
- Follow design system specifications and responsive requirements

#### 4. Project Structure Compliance
- Check `/Docs/project_structure.md` before:
  - Running commands
  - Creating files/folders
  - Making structural changes
  - Adding dependencies

#### 5. Error Handling
- Check `/Docs/Bug_tracking.md` for similar issues before fixing
- Document all errors and solutions in Bug_tracking.md
- Include error details, root cause, and resolution steps

#### 6. Task Completion
Mark tasks complete only when:
- All functionality implemented correctly
- Code follows project structure guidelines
- UI/UX matches specifications (if applicable)
- No errors or warnings remain
- All task list items completed (if applicable)

### File Reference Priority
1. `/Docs/Bug_tracking.md` - Check for known issues first
2. `/Docs/Implementation.md` - Main task reference
3. `/Docs/project_structure.md` - Structure guidance
4. `/Docs/UI_UX_doc.md` - Design requirements

## Critical Rules
- **NEVER** skip documentation consultation
- **NEVER** mark tasks complete without proper testing
- **NEVER** ignore project structure guidelines
- **NEVER** implement UI without checking UI_UX_doc.md
- **NEVER** fix errors without checking Bug_tracking.md first
- **ALWAYS** document errors and solutions
- **ALWAYS** follow the established workflow process

## Web3-Specific Guidelines

### Smart Contract Development
- Always include security best practices
- Implement proper error handling
- Add comprehensive testing
- Follow OpenZeppelin patterns
- Include gas optimization considerations

### Frontend Web3 Integration
- Implement proper wallet connection handling
- Add loading states for blockchain operations
- Handle transaction confirmation flows
- Provide clear error messages for users
- Follow responsive design principles

### Backend Web3 Services
- Implement proper Web3 provider management
- Add event listening and processing
- Handle blockchain network changes
- Implement proper caching strategies
- Add comprehensive logging

## Code Quality Standards

### General Requirements
- Use TypeScript for better type safety
- Implement proper error handling
- Add comprehensive testing
- Follow consistent naming conventions
- Include proper documentation

### Performance Considerations
- Optimize for gas usage in smart contracts
- Implement proper caching strategies
- Use lazy loading where appropriate
- Optimize bundle sizes
- Monitor and optimize performance

### Security Best Practices
- Validate all inputs
- Implement proper access controls
- Use secure random number generation
- Follow the principle of least privilege
- Regular security audits

## Response Style Guidelines

### For Development Responses
- Follow established patterns
- Maintain consistency with existing code
- Provide clear explanations
- Include error handling
- Suggest improvements when appropriate

### For Documentation
- Ensure consistency across all files
- Create logical connections between documents
- Maintain alignment between implementation and design
- Update documentation as project evolves
- Cross-reference between documents

Remember: Build a cohesive, well-documented, and maintainable project. Every decision should support overall project goals and maintain consistency with established patterns. 